// Generated by CoffeeScript 1.4.0
(function() {

  $.Loading = (function() {

    Loading.event = {
      RESET: "orientationchange resize"
    };

    Loading.STOP_TIMEOUT = 30;

    Loading.DEF_NAME = "none";

    Loading.start = function(name) {
      var instance;
      if (name == null) {
        name = Loading.DEF_NAME;
      }
      instance = Loading.instances[name];
      instance.$canvas.addClass("start");
      instance.$target.css({
        visibility: "hidden",
        display: "block"
      });
      instance._setPosition();
      instance.$target.css("visibility", "visible");
      instance.isLoading = true;
      return this;
    };

    Loading.stop = function(name) {
      var instance;
      if (name == null) {
        name = Loading.DEF_NAME;
      }
      instance = Loading.instances[name];
      instance.$canvas.removeClass("start");
      window.setTimeout(function() {
        instance.$target.css({
          display: "none"
        });
        instance.isLoading = false;
        return this;
      }, Loading.STOP_TIMEOUT);
      return this;
    };

    Loading.reset = function() {
      Loading.instances = {};
      Loading.instances[Loading.DEF_NAME] = null;
      return this;
    };

    Loading.reset();

    function Loading($target) {
      this.$target = $target;
      this.cc = null;
      this.$canvas = null;
      this.isLoading = false;
      this.option = {
        name: Loading.DEF_NAME,
        type: "arc",
        width: 27,
        height: 27,
        radius: 3,
        num: 24,
        color: "85, 85, 85",
        offset: 0,
        left: "center",
        top: "center"
      };
    }

    $.extend(Loading.prototype, {
      _setOption: function(option) {
        if (option === void 0) {
          return;
        }
        $.extend(this.option, option);
        return this;
      },
      _init: function() {
        var canvas,
          _this = this;
        this.$canvas = $("<canvas></canvas>");
        canvas = this.$canvas.get(0);
        this.$canvas.prop({
          width: this.option.width,
          height: this.option.height
        });
        this.cc = canvas.getContext("2d");
        this.$target.append(canvas);
        this.$target.css("position", "absolute");
        switch (this.option.type) {
          case "arc":
            this._drawArcs(this.option.num);
            break;
        }
        Loading.stop(this.option.name);
        $(window).on(Loading.event.RESET, function() {
          _this._setPosition();
          return _this;
        });
        return this;
      },
      _setPosition: function() {
        var $parent, left, top;
        left = this.option.left;
        top = this.option.top;
        $parent = this.$target.parent();
        if (left === "center") {
          left = ($parent.innerWidth() - this.$target.innerWidth()) * 0.5 + "px";
        }
        if (top === "center") {
          top = ($parent.innerHeight() - this.$target.innerHeight()) * 0.5 + "px";
        }
        this.$target.css({
          top: top,
          left: left
        });
        return this;
      },
      _drawArcs: function(num) {
        var i, min, offsetR, offsetX, offsetY, rad, radius;
        rad = 2 * Math.PI / num;
        min = 1 / num;
        radius = this.option.radius;
        offsetX = this.option.width * 0.5;
        offsetY = this.option.height * 0.5;
        offsetR = offsetX - radius;
        i = 0;
        while (num > i) {
          this._drawArc((Math.cos(rad * i)) * offsetR + offsetX, (Math.sin(rad * i)) * offsetR + offsetY, radius, this.option.color, min * i + this.option.offset);
          i++;
        }
        return this;
      },
      _drawArc: function(x, y, radius, color, a) {
        this.cc.beginPath();
        this.cc.fillStyle = "rgba(" + color + ", " + a + ")";
        this.cc.arc(x, y, radius, 0, 2 * Math.PI, false);
        this.cc.fill();
        this.cc.restore();
        this.cc.save();
        return this;
      }
    });

    $.fn.loading = function(option) {
      if (option == null) {
        option = {
          name: "none"
        };
      }
      return this.each(function() {
        var _ref;
        if ((_ref = option.name) == null) {
          option.name = "none";
        }
        Loading.instances[option.name] = new Loading($(this));
        Loading.instances[option.name]._setOption(option);
        Loading.instances[option.name]._init();
        return this;
      });
    };

    return Loading;

  })();

}).call(this);
